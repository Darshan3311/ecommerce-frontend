{"ast":null,"code":"import api from'../utils/api';class AuthService{// Register\nasync register(userData){const response=await api.post('/auth/register',userData);return response.data;}// Login\nasync login(credentials){const response=await api.post('/auth/login',credentials);if(response.data.token){localStorage.setItem('token',response.data.token);localStorage.setItem('user',JSON.stringify(response.data.user));}return response.data;}// Logout\nlogout(){localStorage.removeItem('token');localStorage.removeItem('user');localStorage.removeItem('cart');}// Get current user\nasync getCurrentUser(){const response=await api.get('/auth/me');return response.data.user;}// Verify email\nasync verifyEmail(token){const response=await api.get(\"/auth/verify-email?token=\".concat(token));return response.data;}// Resend verification email\nasync resendVerificationEmail(email){const response=await api.post('/auth/resend-verification',{email});return response.data;}// Forgot password\nasync forgotPassword(email){const response=await api.post('/auth/forgot-password',{email});return response.data;}// Reset password\nasync resetPassword(token,password){const response=await api.post(\"/auth/reset-password?token=\".concat(token),{password});return response.data;}// Get stored user\ngetStoredUser(){const userStr=localStorage.getItem('user');return userStr?JSON.parse(userStr):null;}// Get stored token\ngetStoredToken(){return localStorage.getItem('token');}// Check if logged in\nisLoggedIn(){return!!this.getStoredToken();}}const authServiceInstance=new AuthService();export default authServiceInstance;","map":{"version":3,"names":["api","AuthService","register","userData","response","post","data","login","credentials","token","localStorage","setItem","JSON","stringify","user","logout","removeItem","getCurrentUser","get","verifyEmail","concat","resendVerificationEmail","email","forgotPassword","resetPassword","password","getStoredUser","userStr","getItem","parse","getStoredToken","isLoggedIn","authServiceInstance"],"sources":["F:/projects/e-com/frontend/src/services/auth.service.js"],"sourcesContent":["import api from '../utils/api';\r\n\r\nclass AuthService {\r\n  // Register\r\n  async register(userData) {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  }\r\n\r\n  // Login\r\n  async login(credentials) {\r\n    const response = await api.post('/auth/login', credentials);\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  // Logout\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('cart');\r\n  }\r\n\r\n  // Get current user\r\n  async getCurrentUser() {\r\n    const response = await api.get('/auth/me');\r\n    return response.data.user;\r\n  }\r\n\r\n  // Verify email\r\n  async verifyEmail(token) {\r\n    const response = await api.get(`/auth/verify-email?token=${token}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Resend verification email\r\n  async resendVerificationEmail(email) {\r\n    const response = await api.post('/auth/resend-verification', { email });\r\n    return response.data;\r\n  }\r\n\r\n  // Forgot password\r\n  async forgotPassword(email) {\r\n    const response = await api.post('/auth/forgot-password', { email });\r\n    return response.data;\r\n  }\r\n\r\n  // Reset password\r\n  async resetPassword(token, password) {\r\n    const response = await api.post(`/auth/reset-password?token=${token}`, { password });\r\n    return response.data;\r\n  }\r\n\r\n  // Get stored user\r\n  getStoredUser() {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  }\r\n\r\n  // Get stored token\r\n  getStoredToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Check if logged in\r\n  isLoggedIn() {\r\n    return !!this.getStoredToken();\r\n  }\r\n}\r\n\r\nconst authServiceInstance = new AuthService();\r\nexport default authServiceInstance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}