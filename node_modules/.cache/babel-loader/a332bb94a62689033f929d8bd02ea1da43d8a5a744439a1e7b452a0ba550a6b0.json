{"ast":null,"code":"import { create } from 'zustand';\nimport AuthService from '../services/auth.service';\nconst useAuthStore = create((set, get) => ({\n  user: AuthService.getStoredUser(),\n  token: AuthService.getStoredToken(),\n  isAuthenticated: AuthService.isLoggedIn(),\n  isLoading: false,\n  error: null,\n  // Set user\n  setUser: user => set({\n    user,\n    isAuthenticated: true\n  }),\n  // Set token\n  setToken: token => set({\n    token\n  }),\n  // Login\n  login: async credentials => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const data = await AuthService.login(credentials);\n      set({\n        user: data.user,\n        token: data.token,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      return data;\n    } catch (error) {\n      set({\n        error: error.message,\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  // Register\n  register: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const data = await AuthService.register(userData);\n      set({\n        isLoading: false\n      });\n      return data;\n    } catch (error) {\n      set({\n        error: error.message,\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  // Logout\n  logout: () => {\n    AuthService.logout();\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      error: null\n    });\n  },\n  // Update user\n  updateUser: userData => {\n    const updatedUser = {\n      ...get().user,\n      ...userData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    set({\n      user: updatedUser\n    });\n  },\n  // Clear error\n  clearError: () => set({\n    error: null\n  })\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","AuthService","useAuthStore","set","get","user","getStoredUser","token","getStoredToken","isAuthenticated","isLoggedIn","isLoading","error","setUser","setToken","login","credentials","data","message","register","userData","logout","updateUser","updatedUser","localStorage","setItem","JSON","stringify","clearError"],"sources":["F:/projects/e-com/frontend/src/store/useAuthStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport AuthService from '../services/auth.service';\r\n\r\nconst useAuthStore = create((set, get) => ({\r\n  user: AuthService.getStoredUser(),\r\n  token: AuthService.getStoredToken(),\r\n  isAuthenticated: AuthService.isLoggedIn(),\r\n  isLoading: false,\r\n  error: null,\r\n\r\n  // Set user\r\n  setUser: (user) => set({ user, isAuthenticated: true }),\r\n\r\n  // Set token\r\n  setToken: (token) => set({ token }),\r\n\r\n  // Login\r\n  login: async (credentials) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const data = await AuthService.login(credentials);\r\n      set({\r\n        user: data.user,\r\n        token: data.token,\r\n        isAuthenticated: true,\r\n        isLoading: false\r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      set({ error: error.message, isLoading: false });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Register\r\n  register: async (userData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const data = await AuthService.register(userData);\r\n      set({ isLoading: false });\r\n      return data;\r\n    } catch (error) {\r\n      set({ error: error.message, isLoading: false });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Logout\r\n  logout: () => {\r\n    AuthService.logout();\r\n    set({\r\n      user: null,\r\n      token: null,\r\n      isAuthenticated: false,\r\n      error: null\r\n    });\r\n  },\r\n\r\n  // Update user\r\n  updateUser: (userData) => {\r\n    const updatedUser = { ...get().user, ...userData };\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    set({ user: updatedUser });\r\n  },\r\n\r\n  // Clear error\r\n  clearError: () => set({ error: null })\r\n}));\r\n\r\nexport default useAuthStore;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,WAAW,MAAM,0BAA0B;AAElD,MAAMC,YAAY,GAAGF,MAAM,CAAC,CAACG,GAAG,EAAEC,GAAG,MAAM;EACzCC,IAAI,EAAEJ,WAAW,CAACK,aAAa,CAAC,CAAC;EACjCC,KAAK,EAAEN,WAAW,CAACO,cAAc,CAAC,CAAC;EACnCC,eAAe,EAAER,WAAW,CAACS,UAAU,CAAC,CAAC;EACzCC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEX;EACAC,OAAO,EAAGR,IAAI,IAAKF,GAAG,CAAC;IAAEE,IAAI;IAAEI,eAAe,EAAE;EAAK,CAAC,CAAC;EAEvD;EACAK,QAAQ,EAAGP,KAAK,IAAKJ,GAAG,CAAC;IAAEI;EAAM,CAAC,CAAC;EAEnC;EACAQ,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5Bb,GAAG,CAAC;MAAEQ,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAMK,IAAI,GAAG,MAAMhB,WAAW,CAACc,KAAK,CAACC,WAAW,CAAC;MACjDb,GAAG,CAAC;QACFE,IAAI,EAAEY,IAAI,CAACZ,IAAI;QACfE,KAAK,EAAEU,IAAI,CAACV,KAAK;QACjBE,eAAe,EAAE,IAAI;QACrBE,SAAS,EAAE;MACb,CAAC,CAAC;MACF,OAAOM,IAAI;IACb,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdT,GAAG,CAAC;QAAES,KAAK,EAAEA,KAAK,CAACM,OAAO;QAAEP,SAAS,EAAE;MAAM,CAAC,CAAC;MAC/C,MAAMC,KAAK;IACb;EACF,CAAC;EAED;EACAO,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5BjB,GAAG,CAAC;MAAEQ,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAMK,IAAI,GAAG,MAAMhB,WAAW,CAACkB,QAAQ,CAACC,QAAQ,CAAC;MACjDjB,GAAG,CAAC;QAAEQ,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,OAAOM,IAAI;IACb,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdT,GAAG,CAAC;QAAES,KAAK,EAAEA,KAAK,CAACM,OAAO;QAAEP,SAAS,EAAE;MAAM,CAAC,CAAC;MAC/C,MAAMC,KAAK;IACb;EACF,CAAC;EAED;EACAS,MAAM,EAAEA,CAAA,KAAM;IACZpB,WAAW,CAACoB,MAAM,CAAC,CAAC;IACpBlB,GAAG,CAAC;MACFE,IAAI,EAAE,IAAI;MACVE,KAAK,EAAE,IAAI;MACXE,eAAe,EAAE,KAAK;MACtBG,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC;EAED;EACAU,UAAU,EAAGF,QAAQ,IAAK;IACxB,MAAMG,WAAW,GAAG;MAAE,GAAGnB,GAAG,CAAC,CAAC,CAACC,IAAI;MAAE,GAAGe;IAAS,CAAC;IAClDI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,CAAC;IACzDpB,GAAG,CAAC;MAAEE,IAAI,EAAEkB;IAAY,CAAC,CAAC;EAC5B,CAAC;EAED;EACAK,UAAU,EAAEA,CAAA,KAAMzB,GAAG,CAAC;IAAES,KAAK,EAAE;EAAK,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,eAAeV,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}