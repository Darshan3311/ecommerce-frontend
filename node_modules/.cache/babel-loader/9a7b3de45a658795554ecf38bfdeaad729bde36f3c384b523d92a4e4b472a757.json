{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport CartService from '../services/cart.service';\nimport useAuthStore from './useAuthStore';\nconst useCartStore = create(persist((set, get) => ({\n  items: [],\n  subtotal: 0,\n  tax: 0,\n  total: 0,\n  isLoading: false,\n  // Calculate totals\n  calculateTotals: () => {\n    const items = get().items;\n    const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    const tax = subtotal * 0.08; // 8% tax\n    const total = subtotal + tax;\n    set({\n      subtotal,\n      tax,\n      total\n    });\n  },\n  // Set cart\n  setCart: cart => {\n    set({\n      items: cart.items || [],\n      subtotal: cart.subtotal || 0,\n      tax: cart.tax || 0,\n      total: cart.total || 0\n    });\n  },\n  // Fetch cart from server\n  fetchCart: async () => {\n    const isAuthenticated = useAuthStore.getState().isAuthenticated;\n    if (!isAuthenticated) {\n      const localCart = CartService.getLocalCart();\n      get().setCart(localCart);\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      const cart = await CartService.getCart();\n      get().setCart(cart);\n      set({\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      console.error('Failed to fetch cart:', error);\n    }\n  },\n  // Add to cart\n  addToCart: async (productListing, quantity = 1) => {\n    const isAuthenticated = useAuthStore.getState().isAuthenticated;\n    if (!isAuthenticated) {\n      const cart = CartService.addToLocalCart(productListing, quantity);\n      get().setCart(cart);\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      const cart = await CartService.addToCart(productListing._id, quantity);\n      get().setCart(cart);\n      set({\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  // Update cart item\n  updateCartItem: async (productListingId, quantity) => {\n    const isAuthenticated = useAuthStore.getState().isAuthenticated;\n    if (!isAuthenticated) {\n      // Handle local cart update\n      const cart = CartService.getLocalCart();\n      const itemIndex = cart.items.findIndex(item => item.productListingId === productListingId);\n      if (itemIndex > -1) {\n        cart.items[itemIndex].quantity = quantity;\n        CartService.saveLocalCart(cart);\n        get().setCart(cart);\n      }\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      const cart = await CartService.updateCartItem(productListingId, quantity);\n      get().setCart(cart);\n      set({\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  // Remove from cart\n  removeFromCart: async productListingId => {\n    const isAuthenticated = useAuthStore.getState().isAuthenticated;\n    if (!isAuthenticated) {\n      const cart = CartService.removeFromLocalCart(productListingId);\n      get().setCart(cart);\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      const cart = await CartService.removeFromCart(productListingId);\n      get().setCart(cart);\n      set({\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  // Clear cart\n  clearCart: async () => {\n    const isAuthenticated = useAuthStore.getState().isAuthenticated;\n    if (!isAuthenticated) {\n      CartService.clearLocalCart();\n      set({\n        items: [],\n        subtotal: 0,\n        tax: 0,\n        total: 0\n      });\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      await CartService.clearCart();\n      set({\n        items: [],\n        subtotal: 0,\n        tax: 0,\n        total: 0,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  // Sync cart after login\n  syncCart: async () => {\n    const localCart = CartService.getLocalCart();\n    if (localCart.items.length > 0) {\n      try {\n        const cart = await CartService.syncCart(localCart.items);\n        get().setCart(cart);\n        CartService.clearLocalCart();\n      } catch (error) {\n        console.error('Failed to sync cart:', error);\n      }\n    } else {\n      await get().fetchCart();\n    }\n  },\n  // Get item count\n  getItemCount: () => {\n    return get().items.reduce((sum, item) => sum + item.quantity, 0);\n  }\n}), {\n  name: 'cart-storage',\n  partialize: state => ({\n    items: state.items,\n    subtotal: state.subtotal,\n    tax: state.tax,\n    total: state.total\n  })\n}));\nexport default useCartStore;","map":{"version":3,"names":["create","persist","CartService","useAuthStore","useCartStore","set","get","items","subtotal","tax","total","isLoading","calculateTotals","reduce","sum","item","price","quantity","setCart","cart","fetchCart","isAuthenticated","getState","localCart","getLocalCart","getCart","error","console","addToCart","productListing","addToLocalCart","_id","updateCartItem","productListingId","itemIndex","findIndex","saveLocalCart","removeFromCart","removeFromLocalCart","clearCart","clearLocalCart","syncCart","length","getItemCount","name","partialize","state"],"sources":["F:/projects/e-com/frontend/src/store/useCartStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport CartService from '../services/cart.service';\r\nimport useAuthStore from './useAuthStore';\r\n\r\nconst useCartStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      items: [],\r\n      subtotal: 0,\r\n      tax: 0,\r\n      total: 0,\r\n      isLoading: false,\r\n\r\n      // Calculate totals\r\n      calculateTotals: () => {\r\n        const items = get().items;\r\n        const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n        const tax = subtotal * 0.08; // 8% tax\r\n        const total = subtotal + tax;\r\n        set({ subtotal, tax, total });\r\n      },\r\n\r\n      // Set cart\r\n      setCart: (cart) => {\r\n        set({\r\n          items: cart.items || [],\r\n          subtotal: cart.subtotal || 0,\r\n          tax: cart.tax || 0,\r\n          total: cart.total || 0\r\n        });\r\n      },\r\n\r\n      // Fetch cart from server\r\n      fetchCart: async () => {\r\n        const isAuthenticated = useAuthStore.getState().isAuthenticated;\r\n        if (!isAuthenticated) {\r\n          const localCart = CartService.getLocalCart();\r\n          get().setCart(localCart);\r\n          return;\r\n        }\r\n\r\n        set({ isLoading: true });\r\n        try {\r\n          const cart = await CartService.getCart();\r\n          get().setCart(cart);\r\n          set({ isLoading: false });\r\n        } catch (error) {\r\n          set({ isLoading: false });\r\n          console.error('Failed to fetch cart:', error);\r\n        }\r\n      },\r\n\r\n      // Add to cart\r\n      addToCart: async (productListing, quantity = 1) => {\r\n        const isAuthenticated = useAuthStore.getState().isAuthenticated;\r\n\r\n        if (!isAuthenticated) {\r\n          const cart = CartService.addToLocalCart(productListing, quantity);\r\n          get().setCart(cart);\r\n          return;\r\n        }\r\n\r\n        set({ isLoading: true });\r\n        try {\r\n          const cart = await CartService.addToCart(productListing._id, quantity);\r\n          get().setCart(cart);\r\n          set({ isLoading: false });\r\n        } catch (error) {\r\n          set({ isLoading: false });\r\n          throw error;\r\n        }\r\n      },\r\n\r\n      // Update cart item\r\n      updateCartItem: async (productListingId, quantity) => {\r\n        const isAuthenticated = useAuthStore.getState().isAuthenticated;\r\n\r\n        if (!isAuthenticated) {\r\n          // Handle local cart update\r\n          const cart = CartService.getLocalCart();\r\n          const itemIndex = cart.items.findIndex(item => item.productListingId === productListingId);\r\n          if (itemIndex > -1) {\r\n            cart.items[itemIndex].quantity = quantity;\r\n            CartService.saveLocalCart(cart);\r\n            get().setCart(cart);\r\n          }\r\n          return;\r\n        }\r\n\r\n        set({ isLoading: true });\r\n        try {\r\n          const cart = await CartService.updateCartItem(productListingId, quantity);\r\n          get().setCart(cart);\r\n          set({ isLoading: false });\r\n        } catch (error) {\r\n          set({ isLoading: false });\r\n          throw error;\r\n        }\r\n      },\r\n\r\n      // Remove from cart\r\n      removeFromCart: async (productListingId) => {\r\n        const isAuthenticated = useAuthStore.getState().isAuthenticated;\r\n\r\n        if (!isAuthenticated) {\r\n          const cart = CartService.removeFromLocalCart(productListingId);\r\n          get().setCart(cart);\r\n          return;\r\n        }\r\n\r\n        set({ isLoading: true });\r\n        try {\r\n          const cart = await CartService.removeFromCart(productListingId);\r\n          get().setCart(cart);\r\n          set({ isLoading: false });\r\n        } catch (error) {\r\n          set({ isLoading: false });\r\n          throw error;\r\n        }\r\n      },\r\n\r\n      // Clear cart\r\n      clearCart: async () => {\r\n        const isAuthenticated = useAuthStore.getState().isAuthenticated;\r\n\r\n        if (!isAuthenticated) {\r\n          CartService.clearLocalCart();\r\n          set({ items: [], subtotal: 0, tax: 0, total: 0 });\r\n          return;\r\n        }\r\n\r\n        set({ isLoading: true });\r\n        try {\r\n          await CartService.clearCart();\r\n          set({ items: [], subtotal: 0, tax: 0, total: 0, isLoading: false });\r\n        } catch (error) {\r\n          set({ isLoading: false });\r\n          throw error;\r\n        }\r\n      },\r\n\r\n      // Sync cart after login\r\n      syncCart: async () => {\r\n        const localCart = CartService.getLocalCart();\r\n        if (localCart.items.length > 0) {\r\n          try {\r\n            const cart = await CartService.syncCart(localCart.items);\r\n            get().setCart(cart);\r\n            CartService.clearLocalCart();\r\n          } catch (error) {\r\n            console.error('Failed to sync cart:', error);\r\n          }\r\n        } else {\r\n          await get().fetchCart();\r\n        }\r\n      },\r\n\r\n      // Get item count\r\n      getItemCount: () => {\r\n        return get().items.reduce((sum, item) => sum + item.quantity, 0);\r\n      }\r\n    }),\r\n    {\r\n      name: 'cart-storage',\r\n      partialize: (state) => ({\r\n        items: state.items,\r\n        subtotal: state.subtotal,\r\n        tax: state.tax,\r\n        total: state.total\r\n      })\r\n    }\r\n  )\r\n);\r\n\r\nexport default useCartStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}